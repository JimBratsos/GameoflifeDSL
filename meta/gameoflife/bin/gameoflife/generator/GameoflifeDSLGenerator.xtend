/*
 * generated by Xtext 2.25.0
 */
package gameoflife.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import gameoflife.gameoflifeDSL.GameStart

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GameoflifeDSLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(resource.className+".java", toJavaCode(resource.contents.head as GameStart))
	}
	
	protected def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}

	protected def toJavaCode(GameStart gs) '''
		package GameOfLife;
		
			import java.awt.Point;
			import java.util.ArrayList;
		
			public class RulesOfLife {
				public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {
		        	// Iterate through the array, follow game of life rules
		       		for (int i=1; i<gameBoard.length-1; i++) {
		            	for (int j=1; j<gameBoard[0].length-1; j++) {
			                int surrounding = 0;
			                if (gameBoard[i-1][j-1]) { surrounding++; }
			                if (gameBoard[i-1][j])   { surrounding++; }
			                if (gameBoard[i-1][j+1]) { surrounding++; }
			                if (gameBoard[i][j-1])   { surrounding++; }
			                if (gameBoard[i][j+1])   { surrounding++; }
			                if (gameBoard[i+1][j-1]) { surrounding++; }
			                if (gameBoard[i+1][j])   { surrounding++; }
			                if (gameBoard[i+1][j+1]) { surrounding++; }
			                
							«FOR rule : gs.evolutionRules»
								«FOR liveRule: rule.liveRules»
									«var ruleCompare = liveRule.surroundingCheck.checks.compare»
									«var number = liveRule.surroundingCheck.checks.integer»
									if((gameBoard[i][j]) && (surrounding«IF ruleCompare == '='» == «ELSE» «ruleCompare» «ENDIF»«number» «FOR extras: liveRule.surroundingCheck.extracheck»«var ruleCompareExtra = extras.check.compare»«var numberExtra = extras.check.integer»«IF extras.operator == 'and'» && «ELSEIF extras.operator == 'or'» || «ENDIF»surrounding«IF ruleCompareExtra == '='» == «ELSE» «ruleCompareExtra» «ENDIF»«numberExtra»«ENDFOR»)){
										survivingCells.add(new Point(i-1,j-1));
									}	
								«ENDFOR»
								
								«FOR dieRule: rule.deadRules»
									«var ruleCompare = dieRule.surroundingCheck.checks.compare»
									«var number = dieRule.surroundingCheck.checks.integer»
									if((gameBoard[i][j]) && (surrounding«IF ruleCompare == '='» == «ELSE» «ruleCompare» «ENDIF»«number» «FOR extras: dieRule.surroundingCheck.extracheck»«var ruleCompareExtra = extras.check.compare»«var numberExtra = extras.check.integer»«IF extras.operator == 'and'» && «ELSEIF extras.operator == 'or'» || «ENDIF»surrounding«IF ruleCompareExtra == '='» == «ELSE» «ruleCompareExtra» «ENDIF»«numberExtra»«ENDFOR»)){
										survivingCells.add(new Point(i-1,j-1));
									}	
								«ENDFOR»
								
								«FOR becomeAliveRule: rule.becomeAliveRules»
									«var ruleCompare = becomeAliveRule.surroundingCheck.checks.compare»
									«var number = becomeAliveRule.surroundingCheck.checks.integer»
									if((gameBoard[i][j]) && (surrounding«IF ruleCompare == '='» == «ELSE» «ruleCompare» «ENDIF»«number» «FOR extras: becomeAliveRule.surroundingCheck.extracheck»«var ruleCompareExtra = extras.check.compare»«var numberExtra = extras.check.integer»«IF extras.operator == 'and'» && «ELSEIF extras.operator == 'or'» || «ENDIF»surrounding«IF ruleCompareExtra == '='» == «ELSE» «ruleCompareExtra» «ENDIF»«numberExtra»«ENDFOR»)){
										survivingCells.add(new Point(i-1,j-1));
									}	
								«ENDFOR»
							«ENDFOR»
					
						}
					}
			
			
				}
				public static void addPointsToGrid(ArrayList<Point> cellsToAdd) {
					«FOR cell : gs.initialGrid.cells»
					cellsToAdd.add(new Point(«cell.coordinates.x»,«cell.coordinates.y»));
					«ENDFOR»
					«FOR line : gs.initialGrid.lines»
					for(int row = «line.coordinates.xbeg»; row <= «line.coordinates.xend»; row++) {
						for(int col = «line.coordinates.ybeg»; col <= «line.coordinates.yend»; col++) {
							cellsToAdd.add(new Point(row,col));
						}
					}
					«ENDFOR»
			  	}
			}
		
	'''
}