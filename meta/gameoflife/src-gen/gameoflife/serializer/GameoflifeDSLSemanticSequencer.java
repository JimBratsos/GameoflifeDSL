/*
 * generated by Xtext 2.25.0
 */
package gameoflife.serializer;

import com.google.inject.Inject;
import gameoflife.gameoflifeDSL.BecomeAliveRules;
import gameoflife.gameoflifeDSL.CellStatus;
import gameoflife.gameoflifeDSL.Check;
import gameoflife.gameoflifeDSL.Coordinates;
import gameoflife.gameoflifeDSL.DieRules;
import gameoflife.gameoflifeDSL.EvolutionRules;
import gameoflife.gameoflifeDSL.ExtraCheck;
import gameoflife.gameoflifeDSL.GameStart;
import gameoflife.gameoflifeDSL.GameoflifeDSLPackage;
import gameoflife.gameoflifeDSL.InitialGrid;
import gameoflife.gameoflifeDSL.LineCoords;
import gameoflife.gameoflifeDSL.LineStatus;
import gameoflife.gameoflifeDSL.LiveRules;
import gameoflife.gameoflifeDSL.SurroundingCheck;
import gameoflife.services.GameoflifeDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GameoflifeDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameoflifeDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GameoflifeDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GameoflifeDSLPackage.BECOME_ALIVE_RULES:
				sequence_BecomeAliveRules(context, (BecomeAliveRules) semanticObject); 
				return; 
			case GameoflifeDSLPackage.CELL_STATUS:
				sequence_CellStatus(context, (CellStatus) semanticObject); 
				return; 
			case GameoflifeDSLPackage.CHECK:
				sequence_Check(context, (Check) semanticObject); 
				return; 
			case GameoflifeDSLPackage.COORDINATES:
				sequence_Coordinates(context, (Coordinates) semanticObject); 
				return; 
			case GameoflifeDSLPackage.DIE_RULES:
				sequence_DieRules(context, (DieRules) semanticObject); 
				return; 
			case GameoflifeDSLPackage.EVOLUTION_RULES:
				sequence_EvolutionRules(context, (EvolutionRules) semanticObject); 
				return; 
			case GameoflifeDSLPackage.EXTRA_CHECK:
				sequence_ExtraCheck(context, (ExtraCheck) semanticObject); 
				return; 
			case GameoflifeDSLPackage.GAME_START:
				sequence_GameStart(context, (GameStart) semanticObject); 
				return; 
			case GameoflifeDSLPackage.INITIAL_GRID:
				sequence_InitialGrid(context, (InitialGrid) semanticObject); 
				return; 
			case GameoflifeDSLPackage.LINE_COORDS:
				sequence_LineCoords(context, (LineCoords) semanticObject); 
				return; 
			case GameoflifeDSLPackage.LINE_STATUS:
				sequence_LineStatus(context, (LineStatus) semanticObject); 
				return; 
			case GameoflifeDSLPackage.LIVE_RULES:
				sequence_LiveRules(context, (LiveRules) semanticObject); 
				return; 
			case GameoflifeDSLPackage.SURROUNDING_CHECK:
				sequence_SurroundingCheck(context, (SurroundingCheck) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BecomeAliveRules returns BecomeAliveRules
	 *
	 * Constraint:
	 *     surroundingCheck=SurroundingCheck
	 */
	protected void sequence_BecomeAliveRules(ISerializationContext context, BecomeAliveRules semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.BECOME_ALIVE_RULES__SURROUNDING_CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.BECOME_ALIVE_RULES__SURROUNDING_CHECK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBecomeAliveRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0(), semanticObject.getSurroundingCheck());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CellStatus returns CellStatus
	 *
	 * Constraint:
	 *     coordinates=Coordinates
	 */
	protected void sequence_CellStatus(ISerializationContext context, CellStatus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.CELL_STATUS__COORDINATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.CELL_STATUS__COORDINATES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCellStatusAccess().getCoordinatesCoordinatesParserRuleCall_1_0(), semanticObject.getCoordinates());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Check returns Check
	 *
	 * Constraint:
	 *     (compare=Comparison integer=INT)
	 */
	protected void sequence_Check(ISerializationContext context, Check semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.CHECK__COMPARE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.CHECK__COMPARE));
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.CHECK__INTEGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.CHECK__INTEGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckAccess().getCompareComparisonParserRuleCall_1_0(), semanticObject.getCompare());
		feeder.accept(grammarAccess.getCheckAccess().getIntegerINTTerminalRuleCall_2_0(), semanticObject.getInteger());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Coordinates returns Coordinates
	 *
	 * Constraint:
	 *     (x=INT y=INT)
	 */
	protected void sequence_Coordinates(ISerializationContext context, Coordinates semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.COORDINATES__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.COORDINATES__X));
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.COORDINATES__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.COORDINATES__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DieRules returns DieRules
	 *
	 * Constraint:
	 *     surroundingCheck=SurroundingCheck
	 */
	protected void sequence_DieRules(ISerializationContext context, DieRules semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.DIE_RULES__SURROUNDING_CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.DIE_RULES__SURROUNDING_CHECK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDieRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0(), semanticObject.getSurroundingCheck());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EvolutionRules returns EvolutionRules
	 *
	 * Constraint:
	 *     (liveRules+=LiveRules* deadRules+=DieRules* becomeAliveRules+=BecomeAliveRules*)
	 */
	protected void sequence_EvolutionRules(ISerializationContext context, EvolutionRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExtraCheck returns ExtraCheck
	 *
	 * Constraint:
	 *     (operator=Operators check=Check)
	 */
	protected void sequence_ExtraCheck(ISerializationContext context, ExtraCheck semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.EXTRA_CHECK__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.EXTRA_CHECK__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.EXTRA_CHECK__CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.EXTRA_CHECK__CHECK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtraCheckAccess().getOperatorOperatorsParserRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getExtraCheckAccess().getCheckCheckParserRuleCall_1_0(), semanticObject.getCheck());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GameStart returns GameStart
	 *
	 * Constraint:
	 *     (initialGrid=InitialGrid evolutionRules+=EvolutionRules)
	 */
	protected void sequence_GameStart(ISerializationContext context, GameStart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialGrid returns InitialGrid
	 *
	 * Constraint:
	 *     (cells+=CellStatus* lines+=LineStatus*)
	 */
	protected void sequence_InitialGrid(ISerializationContext context, InitialGrid semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LineCoords returns LineCoords
	 *
	 * Constraint:
	 *     (xbeg=INT xend=INT ybeg=INT yend=INT)
	 */
	protected void sequence_LineCoords(ISerializationContext context, LineCoords semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__XBEG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__XBEG));
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__XEND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__XEND));
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__YBEG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__YBEG));
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__YEND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.LINE_COORDS__YEND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLineCoordsAccess().getXbegINTTerminalRuleCall_2_0(), semanticObject.getXbeg());
		feeder.accept(grammarAccess.getLineCoordsAccess().getXendINTTerminalRuleCall_4_0(), semanticObject.getXend());
		feeder.accept(grammarAccess.getLineCoordsAccess().getYbegINTTerminalRuleCall_8_0(), semanticObject.getYbeg());
		feeder.accept(grammarAccess.getLineCoordsAccess().getYendINTTerminalRuleCall_10_0(), semanticObject.getYend());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LineStatus returns LineStatus
	 *
	 * Constraint:
	 *     coordinates=LineCoords
	 */
	protected void sequence_LineStatus(ISerializationContext context, LineStatus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.LINE_STATUS__COORDINATES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.LINE_STATUS__COORDINATES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLineStatusAccess().getCoordinatesLineCoordsParserRuleCall_0(), semanticObject.getCoordinates());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LiveRules returns LiveRules
	 *
	 * Constraint:
	 *     surroundingCheck=SurroundingCheck
	 */
	protected void sequence_LiveRules(ISerializationContext context, LiveRules semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameoflifeDSLPackage.Literals.LIVE_RULES__SURROUNDING_CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameoflifeDSLPackage.Literals.LIVE_RULES__SURROUNDING_CHECK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiveRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0(), semanticObject.getSurroundingCheck());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SurroundingCheck returns SurroundingCheck
	 *
	 * Constraint:
	 *     (checks=Check extracheck+=ExtraCheck*)
	 */
	protected void sequence_SurroundingCheck(ISerializationContext context, SurroundingCheck semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
