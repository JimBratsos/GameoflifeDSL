/**
 * generated by Xtext 2.25.0
 */
package gameoflife.gameoflifeDSL.util;

import gameoflife.gameoflifeDSL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see gameoflife.gameoflifeDSL.GameoflifeDSLPackage
 * @generated
 */
public class GameoflifeDSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GameoflifeDSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameoflifeDSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GameoflifeDSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameoflifeDSLSwitch<Adapter> modelSwitch =
    new GameoflifeDSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseGameStart(GameStart object)
      {
        return createGameStartAdapter();
      }
      @Override
      public Adapter caseInitialGrid(InitialGrid object)
      {
        return createInitialGridAdapter();
      }
      @Override
      public Adapter caseLineStatus(LineStatus object)
      {
        return createLineStatusAdapter();
      }
      @Override
      public Adapter caseLineCoords(LineCoords object)
      {
        return createLineCoordsAdapter();
      }
      @Override
      public Adapter caseCellStatus(CellStatus object)
      {
        return createCellStatusAdapter();
      }
      @Override
      public Adapter caseCoordinates(Coordinates object)
      {
        return createCoordinatesAdapter();
      }
      @Override
      public Adapter caseEvolutionRules(EvolutionRules object)
      {
        return createEvolutionRulesAdapter();
      }
      @Override
      public Adapter caseLiveRules(LiveRules object)
      {
        return createLiveRulesAdapter();
      }
      @Override
      public Adapter caseDieRules(DieRules object)
      {
        return createDieRulesAdapter();
      }
      @Override
      public Adapter caseBecomeAliveRules(BecomeAliveRules object)
      {
        return createBecomeAliveRulesAdapter();
      }
      @Override
      public Adapter caseSurroundingCheck(SurroundingCheck object)
      {
        return createSurroundingCheckAdapter();
      }
      @Override
      public Adapter caseCheck(Check object)
      {
        return createCheckAdapter();
      }
      @Override
      public Adapter caseExtraCheck(ExtraCheck object)
      {
        return createExtraCheckAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.GameStart <em>Game Start</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.GameStart
   * @generated
   */
  public Adapter createGameStartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.InitialGrid <em>Initial Grid</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.InitialGrid
   * @generated
   */
  public Adapter createInitialGridAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.LineStatus <em>Line Status</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.LineStatus
   * @generated
   */
  public Adapter createLineStatusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.LineCoords <em>Line Coords</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.LineCoords
   * @generated
   */
  public Adapter createLineCoordsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.CellStatus <em>Cell Status</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.CellStatus
   * @generated
   */
  public Adapter createCellStatusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.Coordinates <em>Coordinates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.Coordinates
   * @generated
   */
  public Adapter createCoordinatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.EvolutionRules <em>Evolution Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.EvolutionRules
   * @generated
   */
  public Adapter createEvolutionRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.LiveRules <em>Live Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.LiveRules
   * @generated
   */
  public Adapter createLiveRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.DieRules <em>Die Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.DieRules
   * @generated
   */
  public Adapter createDieRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.BecomeAliveRules <em>Become Alive Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.BecomeAliveRules
   * @generated
   */
  public Adapter createBecomeAliveRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.SurroundingCheck <em>Surrounding Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.SurroundingCheck
   * @generated
   */
  public Adapter createSurroundingCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.Check <em>Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.Check
   * @generated
   */
  public Adapter createCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link gameoflife.gameoflifeDSL.ExtraCheck <em>Extra Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see gameoflife.gameoflifeDSL.ExtraCheck
   * @generated
   */
  public Adapter createExtraCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GameoflifeDSLAdapterFactory
