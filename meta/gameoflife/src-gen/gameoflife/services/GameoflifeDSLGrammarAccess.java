/*
 * generated by Xtext 2.25.0
 */
package gameoflife.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GameoflifeDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.GameStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialGridAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialGridInitialGridParserRuleCall_2_0 = (RuleCall)cInitialGridAssignment_2.eContents().get(0);
		private final Assignment cEvolutionRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEvolutionRulesEvolutionRulesParserRuleCall_3_0 = (RuleCall)cEvolutionRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GameStart: 'GameStart' '{'
		//    initialGrid = InitialGrid // Specify the Initial Grid
		//    evolutionRules += EvolutionRules // Specify the Evolution Rules
		//'}';
		@Override public ParserRule getRule() { return rule; }
		
		// 'GameStart' '{'
		//    initialGrid = InitialGrid // Specify the Initial Grid
		//    evolutionRules += EvolutionRules // Specify the Evolution Rules
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'GameStart'
		public Keyword getGameStartKeyword_0() { return cGameStartKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//initialGrid = InitialGrid
		public Assignment getInitialGridAssignment_2() { return cInitialGridAssignment_2; }
		
		//InitialGrid
		public RuleCall getInitialGridInitialGridParserRuleCall_2_0() { return cInitialGridInitialGridParserRuleCall_2_0; }
		
		//// Specify the Initial Grid
		//   evolutionRules += EvolutionRules
		public Assignment getEvolutionRulesAssignment_3() { return cEvolutionRulesAssignment_3; }
		
		//EvolutionRules
		public RuleCall getEvolutionRulesEvolutionRulesParserRuleCall_3_0() { return cEvolutionRulesEvolutionRulesParserRuleCall_3_0; }
		
		// // Specify the Evolution Rules
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InitialGridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.InitialGrid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialGridAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDrawKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCellsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCellsCellStatusParserRuleCall_1_1_0 = (RuleCall)cCellsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDrawKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLinesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLinesLineStatusParserRuleCall_2_1_0 = (RuleCall)cLinesAssignment_2_1.eContents().get(0);
		
		//InitialGrid:{InitialGrid}
		//    ('Draw' cells+=CellStatus)* // List of zero to more CellStatus. Added {InitialGrid} to ensure proper object creation
		//    ('Draw' lines+=LineStatus)* // List of zero to more LineStatus
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitialGrid}
		//    ('Draw' cells+=CellStatus)* // List of zero to more CellStatus. Added {InitialGrid} to ensure proper object creation
		//    ('Draw' lines+=LineStatus)*
		public Group getGroup() { return cGroup; }
		
		//{InitialGrid}
		public Action getInitialGridAction_0() { return cInitialGridAction_0; }
		
		//('Draw' cells+=CellStatus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'Draw'
		public Keyword getDrawKeyword_1_0() { return cDrawKeyword_1_0; }
		
		//cells+=CellStatus
		public Assignment getCellsAssignment_1_1() { return cCellsAssignment_1_1; }
		
		//CellStatus
		public RuleCall getCellsCellStatusParserRuleCall_1_1_0() { return cCellsCellStatusParserRuleCall_1_1_0; }
		
		//// List of zero to more CellStatus. Added {InitialGrid} to ensure proper object creation
		//   ('Draw' lines+=LineStatus)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'Draw'
		public Keyword getDrawKeyword_2_0() { return cDrawKeyword_2_0; }
		
		//lines+=LineStatus
		public Assignment getLinesAssignment_2_1() { return cLinesAssignment_2_1; }
		
		//LineStatus
		public RuleCall getLinesLineStatusParserRuleCall_2_1_0() { return cLinesLineStatusParserRuleCall_2_1_0; }
	}
	public class LineStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.LineStatus");
		private final Assignment cCoordinatesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCoordinatesLineCoordsParserRuleCall_0 = (RuleCall)cCoordinatesAssignment.eContents().get(0);
		
		//LineStatus:
		//    coordinates=LineCoords
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//coordinates=LineCoords
		public Assignment getCoordinatesAssignment() { return cCoordinatesAssignment; }
		
		//LineCoords
		public RuleCall getCoordinatesLineCoordsParserRuleCall_0() { return cCoordinatesLineCoordsParserRuleCall_0; }
	}
	public class LineCoordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.LineCoords");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXbegAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXbegINTTerminalRuleCall_2_0 = (RuleCall)cXbegAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXendAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXendINTTerminalRuleCall_4_0 = (RuleCall)cXendAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cYbegAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cYbegINTTerminalRuleCall_8_0 = (RuleCall)cYbegAssignment_8.eContents().get(0);
		private final Keyword cToKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cYendAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cYendINTTerminalRuleCall_10_0 = (RuleCall)cYendAssignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//LineCoords:
		//    'Many' '(' xbeg=INT 'to' xend=INT ')' ':' '(' ybeg = INT 'to' yend=INT')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Many' '(' xbeg=INT 'to' xend=INT ')' ':' '(' ybeg = INT 'to' yend=INT')'
		public Group getGroup() { return cGroup; }
		
		//'Many'
		public Keyword getManyKeyword_0() { return cManyKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//xbeg=INT
		public Assignment getXbegAssignment_2() { return cXbegAssignment_2; }
		
		//INT
		public RuleCall getXbegINTTerminalRuleCall_2_0() { return cXbegINTTerminalRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//xend=INT
		public Assignment getXendAssignment_4() { return cXendAssignment_4; }
		
		//INT
		public RuleCall getXendINTTerminalRuleCall_4_0() { return cXendINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//ybeg = INT
		public Assignment getYbegAssignment_8() { return cYbegAssignment_8; }
		
		//INT
		public RuleCall getYbegINTTerminalRuleCall_8_0() { return cYbegINTTerminalRuleCall_8_0; }
		
		//'to'
		public Keyword getToKeyword_9() { return cToKeyword_9; }
		
		//yend=INT
		public Assignment getYendAssignment_10() { return cYendAssignment_10; }
		
		//INT
		public RuleCall getYendINTTerminalRuleCall_10_0() { return cYendINTTerminalRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class CellStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.CellStatus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCoordinatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCoordinatesCoordinatesParserRuleCall_1_0 = (RuleCall)cCoordinatesAssignment_1.eContents().get(0);
		
		//CellStatus:
		//    'Cell' coordinates=Coordinates
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cell' coordinates=Coordinates
		public Group getGroup() { return cGroup; }
		
		//'Cell'
		public Keyword getCellKeyword_0() { return cCellKeyword_0; }
		
		//coordinates=Coordinates
		public Assignment getCoordinatesAssignment_1() { return cCoordinatesAssignment_1; }
		
		//Coordinates
		public RuleCall getCoordinatesCoordinatesParserRuleCall_1_0() { return cCoordinatesCoordinatesParserRuleCall_1_0; }
	}
	public class CoordinatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.Coordinates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinates:
		//    '(' x=INT ',' y=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EvolutionRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.EvolutionRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEvolutionRulesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLiveRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiveRulesLiveRulesParserRuleCall_1_0 = (RuleCall)cLiveRulesAssignment_1.eContents().get(0);
		private final Assignment cDeadRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeadRulesDieRulesParserRuleCall_2_0 = (RuleCall)cDeadRulesAssignment_2.eContents().get(0);
		private final Assignment cBecomeAliveRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBecomeAliveRulesBecomeAliveRulesParserRuleCall_3_0 = (RuleCall)cBecomeAliveRulesAssignment_3.eContents().get(0);
		
		// // (x,y) with x,y int
		//EvolutionRules:
		//        {EvolutionRules} liveRules+=LiveRules*
		//        deadRules+=DieRules*
		//        becomeAliveRules+=BecomeAliveRules*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EvolutionRules} liveRules+=LiveRules*
		//deadRules+=DieRules*
		//becomeAliveRules+=BecomeAliveRules*
		public Group getGroup() { return cGroup; }
		
		//{EvolutionRules}
		public Action getEvolutionRulesAction_0() { return cEvolutionRulesAction_0; }
		
		//liveRules+=LiveRules*
		public Assignment getLiveRulesAssignment_1() { return cLiveRulesAssignment_1; }
		
		//LiveRules
		public RuleCall getLiveRulesLiveRulesParserRuleCall_1_0() { return cLiveRulesLiveRulesParserRuleCall_1_0; }
		
		//deadRules+=DieRules*
		public Assignment getDeadRulesAssignment_2() { return cDeadRulesAssignment_2; }
		
		//DieRules
		public RuleCall getDeadRulesDieRulesParserRuleCall_2_0() { return cDeadRulesDieRulesParserRuleCall_2_0; }
		
		//becomeAliveRules+=BecomeAliveRules*
		public Assignment getBecomeAliveRulesAssignment_3() { return cBecomeAliveRulesAssignment_3; }
		
		//BecomeAliveRules
		public RuleCall getBecomeAliveRulesBecomeAliveRulesParserRuleCall_3_0() { return cBecomeAliveRulesBecomeAliveRulesParserRuleCall_3_0; }
	}
	public class LiveRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.LiveRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStayAliveRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSurroundingCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSurroundingCheckSurroundingCheckParserRuleCall_1_0 = (RuleCall)cSurroundingCheckAssignment_1.eContents().get(0);
		
		//LiveRules:
		//    'StayAliveRule' surroundingCheck=SurroundingCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//'StayAliveRule' surroundingCheck=SurroundingCheck
		public Group getGroup() { return cGroup; }
		
		//'StayAliveRule'
		public Keyword getStayAliveRuleKeyword_0() { return cStayAliveRuleKeyword_0; }
		
		//surroundingCheck=SurroundingCheck
		public Assignment getSurroundingCheckAssignment_1() { return cSurroundingCheckAssignment_1; }
		
		//SurroundingCheck
		public RuleCall getSurroundingCheckSurroundingCheckParserRuleCall_1_0() { return cSurroundingCheckSurroundingCheckParserRuleCall_1_0; }
	}
	public class DieRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.DieRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDieRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSurroundingCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSurroundingCheckSurroundingCheckParserRuleCall_1_0 = (RuleCall)cSurroundingCheckAssignment_1.eContents().get(0);
		
		//DieRules:
		//    'DieRule' surroundingCheck=SurroundingCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//'DieRule' surroundingCheck=SurroundingCheck
		public Group getGroup() { return cGroup; }
		
		//'DieRule'
		public Keyword getDieRuleKeyword_0() { return cDieRuleKeyword_0; }
		
		//surroundingCheck=SurroundingCheck
		public Assignment getSurroundingCheckAssignment_1() { return cSurroundingCheckAssignment_1; }
		
		//SurroundingCheck
		public RuleCall getSurroundingCheckSurroundingCheckParserRuleCall_1_0() { return cSurroundingCheckSurroundingCheckParserRuleCall_1_0; }
	}
	public class BecomeAliveRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.BecomeAliveRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBirthRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSurroundingCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSurroundingCheckSurroundingCheckParserRuleCall_1_0 = (RuleCall)cSurroundingCheckAssignment_1.eContents().get(0);
		
		//BecomeAliveRules:
		//    'BirthRule' surroundingCheck=SurroundingCheck;
		@Override public ParserRule getRule() { return rule; }
		
		//'BirthRule' surroundingCheck=SurroundingCheck
		public Group getGroup() { return cGroup; }
		
		//'BirthRule'
		public Keyword getBirthRuleKeyword_0() { return cBirthRuleKeyword_0; }
		
		//surroundingCheck=SurroundingCheck
		public Assignment getSurroundingCheckAssignment_1() { return cSurroundingCheckAssignment_1; }
		
		//SurroundingCheck
		public RuleCall getSurroundingCheckSurroundingCheckParserRuleCall_1_0() { return cSurroundingCheckSurroundingCheckParserRuleCall_1_0; }
	}
	public class SurroundingCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.SurroundingCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChecksAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChecksCheckParserRuleCall_0_0 = (RuleCall)cChecksAssignment_0.eContents().get(0);
		private final Assignment cExtracheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtracheckExtraCheckParserRuleCall_1_0 = (RuleCall)cExtracheckAssignment_1.eContents().get(0);
		
		//SurroundingCheck:
		//    checks=Check (extracheck+=ExtraCheck)*;
		@Override public ParserRule getRule() { return rule; }
		
		//checks=Check (extracheck+=ExtraCheck)*
		public Group getGroup() { return cGroup; }
		
		//checks=Check
		public Assignment getChecksAssignment_0() { return cChecksAssignment_0; }
		
		//Check
		public RuleCall getChecksCheckParserRuleCall_0_0() { return cChecksCheckParserRuleCall_0_0; }
		
		//(extracheck+=ExtraCheck)*
		public Assignment getExtracheckAssignment_1() { return cExtracheckAssignment_1; }
		
		//ExtraCheck
		public RuleCall getExtracheckExtraCheckParserRuleCall_1_0() { return cExtracheckExtraCheckParserRuleCall_1_0; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurroundingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompareAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompareComparisonParserRuleCall_1_0 = (RuleCall)cCompareAssignment_1.eContents().get(0);
		private final Assignment cIntegerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntegerINTTerminalRuleCall_2_0 = (RuleCall)cIntegerAssignment_2.eContents().get(0);
		
		//Check:
		//    'surrounding' compare=Comparison integer=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'surrounding' compare=Comparison integer=INT
		public Group getGroup() { return cGroup; }
		
		//'surrounding'
		public Keyword getSurroundingKeyword_0() { return cSurroundingKeyword_0; }
		
		//compare=Comparison
		public Assignment getCompareAssignment_1() { return cCompareAssignment_1; }
		
		//Comparison
		public RuleCall getCompareComparisonParserRuleCall_1_0() { return cCompareComparisonParserRuleCall_1_0; }
		
		//integer=INT
		public Assignment getIntegerAssignment_2() { return cIntegerAssignment_2; }
		
		//INT
		public RuleCall getIntegerINTTerminalRuleCall_2_0() { return cIntegerINTTerminalRuleCall_2_0; }
	}
	public class ExtraCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.ExtraCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorsParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cCheckAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckCheckParserRuleCall_1_0 = (RuleCall)cCheckAssignment_1.eContents().get(0);
		
		//ExtraCheck:
		//    operator=Operators check=Check
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=Operators check=Check
		public Group getGroup() { return cGroup; }
		
		//operator=Operators
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//Operators
		public RuleCall getOperatorOperatorsParserRuleCall_0_0() { return cOperatorOperatorsParserRuleCall_0_0; }
		
		//check=Check
		public Assignment getCheckAssignment_1() { return cCheckAssignment_1; }
		
		//Check
		public RuleCall getCheckCheckParserRuleCall_1_0() { return cCheckCheckParserRuleCall_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.Comparison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Comparison:
		//    '<' | '=' | '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' | '=' | '>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class OperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "gameoflife.GameoflifeDSL.Operators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Operators:
		//    'and' | 'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	
	
	private final GameStartElements pGameStart;
	private final InitialGridElements pInitialGrid;
	private final LineStatusElements pLineStatus;
	private final LineCoordsElements pLineCoords;
	private final CellStatusElements pCellStatus;
	private final CoordinatesElements pCoordinates;
	private final EvolutionRulesElements pEvolutionRules;
	private final LiveRulesElements pLiveRules;
	private final DieRulesElements pDieRules;
	private final BecomeAliveRulesElements pBecomeAliveRules;
	private final SurroundingCheckElements pSurroundingCheck;
	private final CheckElements pCheck;
	private final ExtraCheckElements pExtraCheck;
	private final ComparisonElements pComparison;
	private final OperatorsElements pOperators;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GameoflifeDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGameStart = new GameStartElements();
		this.pInitialGrid = new InitialGridElements();
		this.pLineStatus = new LineStatusElements();
		this.pLineCoords = new LineCoordsElements();
		this.pCellStatus = new CellStatusElements();
		this.pCoordinates = new CoordinatesElements();
		this.pEvolutionRules = new EvolutionRulesElements();
		this.pLiveRules = new LiveRulesElements();
		this.pDieRules = new DieRulesElements();
		this.pBecomeAliveRules = new BecomeAliveRulesElements();
		this.pSurroundingCheck = new SurroundingCheckElements();
		this.pCheck = new CheckElements();
		this.pExtraCheck = new ExtraCheckElements();
		this.pComparison = new ComparisonElements();
		this.pOperators = new OperatorsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("gameoflife.GameoflifeDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GameStart: 'GameStart' '{'
	//    initialGrid = InitialGrid // Specify the Initial Grid
	//    evolutionRules += EvolutionRules // Specify the Evolution Rules
	//'}';
	public GameStartElements getGameStartAccess() {
		return pGameStart;
	}
	
	public ParserRule getGameStartRule() {
		return getGameStartAccess().getRule();
	}
	
	//InitialGrid:{InitialGrid}
	//    ('Draw' cells+=CellStatus)* // List of zero to more CellStatus. Added {InitialGrid} to ensure proper object creation
	//    ('Draw' lines+=LineStatus)* // List of zero to more LineStatus
	//;
	public InitialGridElements getInitialGridAccess() {
		return pInitialGrid;
	}
	
	public ParserRule getInitialGridRule() {
		return getInitialGridAccess().getRule();
	}
	
	//LineStatus:
	//    coordinates=LineCoords
	//;
	public LineStatusElements getLineStatusAccess() {
		return pLineStatus;
	}
	
	public ParserRule getLineStatusRule() {
		return getLineStatusAccess().getRule();
	}
	
	//LineCoords:
	//    'Many' '(' xbeg=INT 'to' xend=INT ')' ':' '(' ybeg = INT 'to' yend=INT')'
	//;
	public LineCoordsElements getLineCoordsAccess() {
		return pLineCoords;
	}
	
	public ParserRule getLineCoordsRule() {
		return getLineCoordsAccess().getRule();
	}
	
	//CellStatus:
	//    'Cell' coordinates=Coordinates
	//;
	public CellStatusElements getCellStatusAccess() {
		return pCellStatus;
	}
	
	public ParserRule getCellStatusRule() {
		return getCellStatusAccess().getRule();
	}
	
	//Coordinates:
	//    '(' x=INT ',' y=INT ')';
	public CoordinatesElements getCoordinatesAccess() {
		return pCoordinates;
	}
	
	public ParserRule getCoordinatesRule() {
		return getCoordinatesAccess().getRule();
	}
	
	// // (x,y) with x,y int
	//EvolutionRules:
	//        {EvolutionRules} liveRules+=LiveRules*
	//        deadRules+=DieRules*
	//        becomeAliveRules+=BecomeAliveRules*
	//;
	public EvolutionRulesElements getEvolutionRulesAccess() {
		return pEvolutionRules;
	}
	
	public ParserRule getEvolutionRulesRule() {
		return getEvolutionRulesAccess().getRule();
	}
	
	//LiveRules:
	//    'StayAliveRule' surroundingCheck=SurroundingCheck;
	public LiveRulesElements getLiveRulesAccess() {
		return pLiveRules;
	}
	
	public ParserRule getLiveRulesRule() {
		return getLiveRulesAccess().getRule();
	}
	
	//DieRules:
	//    'DieRule' surroundingCheck=SurroundingCheck;
	public DieRulesElements getDieRulesAccess() {
		return pDieRules;
	}
	
	public ParserRule getDieRulesRule() {
		return getDieRulesAccess().getRule();
	}
	
	//BecomeAliveRules:
	//    'BirthRule' surroundingCheck=SurroundingCheck;
	public BecomeAliveRulesElements getBecomeAliveRulesAccess() {
		return pBecomeAliveRules;
	}
	
	public ParserRule getBecomeAliveRulesRule() {
		return getBecomeAliveRulesAccess().getRule();
	}
	
	//SurroundingCheck:
	//    checks=Check (extracheck+=ExtraCheck)*;
	public SurroundingCheckElements getSurroundingCheckAccess() {
		return pSurroundingCheck;
	}
	
	public ParserRule getSurroundingCheckRule() {
		return getSurroundingCheckAccess().getRule();
	}
	
	//Check:
	//    'surrounding' compare=Comparison integer=INT;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//ExtraCheck:
	//    operator=Operators check=Check
	//;
	public ExtraCheckElements getExtraCheckAccess() {
		return pExtraCheck;
	}
	
	public ParserRule getExtraCheckRule() {
		return getExtraCheckAccess().getRule();
	}
	
	//Comparison:
	//    '<' | '=' | '>';
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Operators:
	//    'and' | 'or';
	public OperatorsElements getOperatorsAccess() {
		return pOperators;
	}
	
	public ParserRule getOperatorsRule() {
		return getOperatorsAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
