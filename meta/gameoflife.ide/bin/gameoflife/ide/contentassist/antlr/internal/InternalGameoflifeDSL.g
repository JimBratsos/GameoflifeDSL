/*
 * generated by Xtext 2.25.0
 */
grammar InternalGameoflifeDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package gameoflife.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package gameoflife.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import gameoflife.services.GameoflifeDSLGrammarAccess;

}
@parser::members {
	private GameoflifeDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(GameoflifeDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGameStart
entryRuleGameStart
:
{ before(grammarAccess.getGameStartRule()); }
	 ruleGameStart
{ after(grammarAccess.getGameStartRule()); } 
	 EOF 
;

// Rule GameStart
ruleGameStart 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameStartAccess().getGroup()); }
		(rule__GameStart__Group__0)
		{ after(grammarAccess.getGameStartAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitialGrid
entryRuleInitialGrid
:
{ before(grammarAccess.getInitialGridRule()); }
	 ruleInitialGrid
{ after(grammarAccess.getInitialGridRule()); } 
	 EOF 
;

// Rule InitialGrid
ruleInitialGrid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitialGridAccess().getGroup()); }
		(rule__InitialGrid__Group__0)
		{ after(grammarAccess.getInitialGridAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineStatus
entryRuleLineStatus
:
{ before(grammarAccess.getLineStatusRule()); }
	 ruleLineStatus
{ after(grammarAccess.getLineStatusRule()); } 
	 EOF 
;

// Rule LineStatus
ruleLineStatus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineStatusAccess().getCoordinatesAssignment()); }
		(rule__LineStatus__CoordinatesAssignment)
		{ after(grammarAccess.getLineStatusAccess().getCoordinatesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineCoords
entryRuleLineCoords
:
{ before(grammarAccess.getLineCoordsRule()); }
	 ruleLineCoords
{ after(grammarAccess.getLineCoordsRule()); } 
	 EOF 
;

// Rule LineCoords
ruleLineCoords 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineCoordsAccess().getGroup()); }
		(rule__LineCoords__Group__0)
		{ after(grammarAccess.getLineCoordsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellStatus
entryRuleCellStatus
:
{ before(grammarAccess.getCellStatusRule()); }
	 ruleCellStatus
{ after(grammarAccess.getCellStatusRule()); } 
	 EOF 
;

// Rule CellStatus
ruleCellStatus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellStatusAccess().getGroup()); }
		(rule__CellStatus__Group__0)
		{ after(grammarAccess.getCellStatusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCoordinates
entryRuleCoordinates
:
{ before(grammarAccess.getCoordinatesRule()); }
	 ruleCoordinates
{ after(grammarAccess.getCoordinatesRule()); } 
	 EOF 
;

// Rule Coordinates
ruleCoordinates 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCoordinatesAccess().getGroup()); }
		(rule__Coordinates__Group__0)
		{ after(grammarAccess.getCoordinatesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvolutionRules
entryRuleEvolutionRules
:
{ before(grammarAccess.getEvolutionRulesRule()); }
	 ruleEvolutionRules
{ after(grammarAccess.getEvolutionRulesRule()); } 
	 EOF 
;

// Rule EvolutionRules
ruleEvolutionRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getGroup()); }
		(rule__EvolutionRules__Group__0)
		{ after(grammarAccess.getEvolutionRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiveRules
entryRuleLiveRules
:
{ before(grammarAccess.getLiveRulesRule()); }
	 ruleLiveRules
{ after(grammarAccess.getLiveRulesRule()); } 
	 EOF 
;

// Rule LiveRules
ruleLiveRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiveRulesAccess().getGroup()); }
		(rule__LiveRules__Group__0)
		{ after(grammarAccess.getLiveRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDieRules
entryRuleDieRules
:
{ before(grammarAccess.getDieRulesRule()); }
	 ruleDieRules
{ after(grammarAccess.getDieRulesRule()); } 
	 EOF 
;

// Rule DieRules
ruleDieRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDieRulesAccess().getGroup()); }
		(rule__DieRules__Group__0)
		{ after(grammarAccess.getDieRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBecomeAliveRules
entryRuleBecomeAliveRules
:
{ before(grammarAccess.getBecomeAliveRulesRule()); }
	 ruleBecomeAliveRules
{ after(grammarAccess.getBecomeAliveRulesRule()); } 
	 EOF 
;

// Rule BecomeAliveRules
ruleBecomeAliveRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBecomeAliveRulesAccess().getGroup()); }
		(rule__BecomeAliveRules__Group__0)
		{ after(grammarAccess.getBecomeAliveRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSurroundingCheck
entryRuleSurroundingCheck
:
{ before(grammarAccess.getSurroundingCheckRule()); }
	 ruleSurroundingCheck
{ after(grammarAccess.getSurroundingCheckRule()); } 
	 EOF 
;

// Rule SurroundingCheck
ruleSurroundingCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSurroundingCheckAccess().getGroup()); }
		(rule__SurroundingCheck__Group__0)
		{ after(grammarAccess.getSurroundingCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheck
entryRuleCheck
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckAccess().getGroup()); }
		(rule__Check__Group__0)
		{ after(grammarAccess.getCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtraCheck
entryRuleExtraCheck
:
{ before(grammarAccess.getExtraCheckRule()); }
	 ruleExtraCheck
{ after(grammarAccess.getExtraCheckRule()); } 
	 EOF 
;

// Rule ExtraCheck
ruleExtraCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtraCheckAccess().getGroup()); }
		(rule__ExtraCheck__Group__0)
		{ after(grammarAccess.getExtraCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getAlternatives()); }
		(rule__Comparison__Alternatives)
		{ after(grammarAccess.getComparisonAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperators
entryRuleOperators
:
{ before(grammarAccess.getOperatorsRule()); }
	 ruleOperators
{ after(grammarAccess.getOperatorsRule()); } 
	 EOF 
;

// Rule Operators
ruleOperators 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperatorsAccess().getAlternatives()); }
		(rule__Operators__Alternatives)
		{ after(grammarAccess.getOperatorsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_0()); }
		'<'
		{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getEqualsSignKeyword_1()); }
		'='
		{ after(grammarAccess.getComparisonAccess().getEqualsSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_2()); }
		'>'
		{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operators__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorsAccess().getAndKeyword_0()); }
		'and'
		{ after(grammarAccess.getOperatorsAccess().getAndKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorsAccess().getOrKeyword_1()); }
		'or'
		{ after(grammarAccess.getOperatorsAccess().getOrKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__0__Impl
	rule__GameStart__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getGameStartKeyword_0()); }
	'GameStart'
	{ after(grammarAccess.getGameStartAccess().getGameStartKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__1__Impl
	rule__GameStart__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getGameStartAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__2__Impl
	rule__GameStart__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getInitialGridAssignment_2()); }
	(rule__GameStart__InitialGridAssignment_2)
	{ after(grammarAccess.getGameStartAccess().getInitialGridAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__3__Impl
	rule__GameStart__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getEvolutionRulesAssignment_3()); }
	(rule__GameStart__EvolutionRulesAssignment_3)
	{ after(grammarAccess.getGameStartAccess().getEvolutionRulesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameStart__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameStartAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getGameStartAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialGrid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group__0__Impl
	rule__InitialGrid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getInitialGridAction_0()); }
	()
	{ after(grammarAccess.getInitialGridAccess().getInitialGridAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group__1__Impl
	rule__InitialGrid__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getGroup_1()); }
	(rule__InitialGrid__Group_1__0)*
	{ after(grammarAccess.getInitialGridAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getGroup_2()); }
	(rule__InitialGrid__Group_2__0)*
	{ after(grammarAccess.getInitialGridAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialGrid__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group_1__0__Impl
	rule__InitialGrid__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getDrawKeyword_1_0()); }
	'Draw'
	{ after(grammarAccess.getInitialGridAccess().getDrawKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getCellsAssignment_1_1()); }
	(rule__InitialGrid__CellsAssignment_1_1)
	{ after(grammarAccess.getInitialGridAccess().getCellsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialGrid__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group_2__0__Impl
	rule__InitialGrid__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getDrawKeyword_2_0()); }
	'Draw'
	{ after(grammarAccess.getInitialGridAccess().getDrawKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialGrid__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialGridAccess().getLinesAssignment_2_1()); }
	(rule__InitialGrid__LinesAssignment_2_1)
	{ after(grammarAccess.getInitialGridAccess().getLinesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LineCoords__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__0__Impl
	rule__LineCoords__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getManyKeyword_0()); }
	'Many'
	{ after(grammarAccess.getLineCoordsAccess().getManyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__1__Impl
	rule__LineCoords__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getLineCoordsAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__2__Impl
	rule__LineCoords__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getXbegAssignment_2()); }
	(rule__LineCoords__XbegAssignment_2)
	{ after(grammarAccess.getLineCoordsAccess().getXbegAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__3__Impl
	rule__LineCoords__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getLineCoordsAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__4__Impl
	rule__LineCoords__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getXendAssignment_4()); }
	(rule__LineCoords__XendAssignment_4)
	{ after(grammarAccess.getLineCoordsAccess().getXendAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__5__Impl
	rule__LineCoords__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getLineCoordsAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__6__Impl
	rule__LineCoords__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getLineCoordsAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__7__Impl
	rule__LineCoords__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getLeftParenthesisKeyword_7()); }
	'('
	{ after(grammarAccess.getLineCoordsAccess().getLeftParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__8__Impl
	rule__LineCoords__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getYbegAssignment_8()); }
	(rule__LineCoords__YbegAssignment_8)
	{ after(grammarAccess.getLineCoordsAccess().getYbegAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__9__Impl
	rule__LineCoords__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getToKeyword_9()); }
	'to'
	{ after(grammarAccess.getLineCoordsAccess().getToKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__10__Impl
	rule__LineCoords__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getYendAssignment_10()); }
	(rule__LineCoords__YendAssignment_10)
	{ after(grammarAccess.getLineCoordsAccess().getYendAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LineCoords__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineCoordsAccess().getRightParenthesisKeyword_11()); }
	')'
	{ after(grammarAccess.getLineCoordsAccess().getRightParenthesisKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CellStatus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellStatus__Group__0__Impl
	rule__CellStatus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellStatus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellStatusAccess().getCellKeyword_0()); }
	'Cell'
	{ after(grammarAccess.getCellStatusAccess().getCellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellStatus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellStatus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellStatus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellStatusAccess().getCoordinatesAssignment_1()); }
	(rule__CellStatus__CoordinatesAssignment_1)
	{ after(grammarAccess.getCellStatusAccess().getCoordinatesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Coordinates__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__0__Impl
	rule__Coordinates__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCoordinatesAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__1__Impl
	rule__Coordinates__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getXAssignment_1()); }
	(rule__Coordinates__XAssignment_1)
	{ after(grammarAccess.getCoordinatesAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__2__Impl
	rule__Coordinates__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getCoordinatesAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__3__Impl
	rule__Coordinates__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getYAssignment_3()); }
	(rule__Coordinates__YAssignment_3)
	{ after(grammarAccess.getCoordinatesAccess().getYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coordinates__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordinatesAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getCoordinatesAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolutionRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__0__Impl
	rule__EvolutionRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getEvolutionRulesAction_0()); }
	()
	{ after(grammarAccess.getEvolutionRulesAccess().getEvolutionRulesAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__1__Impl
	rule__EvolutionRules__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getLiveRulesAssignment_1()); }
	(rule__EvolutionRules__LiveRulesAssignment_1)*
	{ after(grammarAccess.getEvolutionRulesAccess().getLiveRulesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__2__Impl
	rule__EvolutionRules__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getDeadRulesAssignment_2()); }
	(rule__EvolutionRules__DeadRulesAssignment_2)*
	{ after(grammarAccess.getEvolutionRulesAccess().getDeadRulesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRules__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRulesAccess().getBecomeAliveRulesAssignment_3()); }
	(rule__EvolutionRules__BecomeAliveRulesAssignment_3)*
	{ after(grammarAccess.getEvolutionRulesAccess().getBecomeAliveRulesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiveRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiveRules__Group__0__Impl
	rule__LiveRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiveRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiveRulesAccess().getStayAliveRuleKeyword_0()); }
	'StayAliveRule'
	{ after(grammarAccess.getLiveRulesAccess().getStayAliveRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiveRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiveRules__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiveRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiveRulesAccess().getSurroundingCheckAssignment_1()); }
	(rule__LiveRules__SurroundingCheckAssignment_1)
	{ after(grammarAccess.getLiveRulesAccess().getSurroundingCheckAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DieRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DieRules__Group__0__Impl
	rule__DieRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DieRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDieRulesAccess().getDieRuleKeyword_0()); }
	'DieRule'
	{ after(grammarAccess.getDieRulesAccess().getDieRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DieRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DieRules__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DieRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDieRulesAccess().getSurroundingCheckAssignment_1()); }
	(rule__DieRules__SurroundingCheckAssignment_1)
	{ after(grammarAccess.getDieRulesAccess().getSurroundingCheckAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BecomeAliveRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BecomeAliveRules__Group__0__Impl
	rule__BecomeAliveRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BecomeAliveRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBecomeAliveRulesAccess().getBirthRuleKeyword_0()); }
	'BirthRule'
	{ after(grammarAccess.getBecomeAliveRulesAccess().getBirthRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BecomeAliveRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BecomeAliveRules__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BecomeAliveRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBecomeAliveRulesAccess().getSurroundingCheckAssignment_1()); }
	(rule__BecomeAliveRules__SurroundingCheckAssignment_1)
	{ after(grammarAccess.getBecomeAliveRulesAccess().getSurroundingCheckAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SurroundingCheck__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SurroundingCheck__Group__0__Impl
	rule__SurroundingCheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SurroundingCheck__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSurroundingCheckAccess().getChecksAssignment_0()); }
	(rule__SurroundingCheck__ChecksAssignment_0)
	{ after(grammarAccess.getSurroundingCheckAccess().getChecksAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SurroundingCheck__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SurroundingCheck__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SurroundingCheck__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSurroundingCheckAccess().getExtracheckAssignment_1()); }
	(rule__SurroundingCheck__ExtracheckAssignment_1)*
	{ after(grammarAccess.getSurroundingCheckAccess().getExtracheckAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getSurroundingKeyword_0()); }
	'surrounding'
	{ after(grammarAccess.getCheckAccess().getSurroundingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__1__Impl
	rule__Check__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getCompareAssignment_1()); }
	(rule__Check__CompareAssignment_1)
	{ after(grammarAccess.getCheckAccess().getCompareAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getIntegerAssignment_2()); }
	(rule__Check__IntegerAssignment_2)
	{ after(grammarAccess.getCheckAccess().getIntegerAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExtraCheck__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtraCheck__Group__0__Impl
	rule__ExtraCheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraCheck__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtraCheckAccess().getOperatorAssignment_0()); }
	(rule__ExtraCheck__OperatorAssignment_0)
	{ after(grammarAccess.getExtraCheckAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraCheck__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtraCheck__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraCheck__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtraCheckAccess().getCheckAssignment_1()); }
	(rule__ExtraCheck__CheckAssignment_1)
	{ after(grammarAccess.getExtraCheckAccess().getCheckAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GameStart__InitialGridAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameStartAccess().getInitialGridInitialGridParserRuleCall_2_0()); }
		ruleInitialGrid
		{ after(grammarAccess.getGameStartAccess().getInitialGridInitialGridParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameStart__EvolutionRulesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameStartAccess().getEvolutionRulesEvolutionRulesParserRuleCall_3_0()); }
		ruleEvolutionRules
		{ after(grammarAccess.getGameStartAccess().getEvolutionRulesEvolutionRulesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__CellsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialGridAccess().getCellsCellStatusParserRuleCall_1_1_0()); }
		ruleCellStatus
		{ after(grammarAccess.getInitialGridAccess().getCellsCellStatusParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialGrid__LinesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialGridAccess().getLinesLineStatusParserRuleCall_2_1_0()); }
		ruleLineStatus
		{ after(grammarAccess.getInitialGridAccess().getLinesLineStatusParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineStatus__CoordinatesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineStatusAccess().getCoordinatesLineCoordsParserRuleCall_0()); }
		ruleLineCoords
		{ after(grammarAccess.getLineStatusAccess().getCoordinatesLineCoordsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__XbegAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineCoordsAccess().getXbegINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getLineCoordsAccess().getXbegINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__XendAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineCoordsAccess().getXendINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getLineCoordsAccess().getXendINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__YbegAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineCoordsAccess().getYbegINTTerminalRuleCall_8_0()); }
		RULE_INT
		{ after(grammarAccess.getLineCoordsAccess().getYbegINTTerminalRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineCoords__YendAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineCoordsAccess().getYendINTTerminalRuleCall_10_0()); }
		RULE_INT
		{ after(grammarAccess.getLineCoordsAccess().getYendINTTerminalRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellStatus__CoordinatesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellStatusAccess().getCoordinatesCoordinatesParserRuleCall_1_0()); }
		ruleCoordinates
		{ after(grammarAccess.getCellStatusAccess().getCoordinatesCoordinatesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCoordinatesAccess().getXINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coordinates__YAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getCoordinatesAccess().getYINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__LiveRulesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getLiveRulesLiveRulesParserRuleCall_1_0()); }
		ruleLiveRules
		{ after(grammarAccess.getEvolutionRulesAccess().getLiveRulesLiveRulesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__DeadRulesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getDeadRulesDieRulesParserRuleCall_2_0()); }
		ruleDieRules
		{ after(grammarAccess.getEvolutionRulesAccess().getDeadRulesDieRulesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRules__BecomeAliveRulesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRulesAccess().getBecomeAliveRulesBecomeAliveRulesParserRuleCall_3_0()); }
		ruleBecomeAliveRules
		{ after(grammarAccess.getEvolutionRulesAccess().getBecomeAliveRulesBecomeAliveRulesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiveRules__SurroundingCheckAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiveRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0()); }
		ruleSurroundingCheck
		{ after(grammarAccess.getLiveRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DieRules__SurroundingCheckAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDieRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0()); }
		ruleSurroundingCheck
		{ after(grammarAccess.getDieRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BecomeAliveRules__SurroundingCheckAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBecomeAliveRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0()); }
		ruleSurroundingCheck
		{ after(grammarAccess.getBecomeAliveRulesAccess().getSurroundingCheckSurroundingCheckParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SurroundingCheck__ChecksAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSurroundingCheckAccess().getChecksCheckParserRuleCall_0_0()); }
		ruleCheck
		{ after(grammarAccess.getSurroundingCheckAccess().getChecksCheckParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SurroundingCheck__ExtracheckAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSurroundingCheckAccess().getExtracheckExtraCheckParserRuleCall_1_0()); }
		ruleExtraCheck
		{ after(grammarAccess.getSurroundingCheckAccess().getExtracheckExtraCheckParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__CompareAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getCompareComparisonParserRuleCall_1_0()); }
		ruleComparison
		{ after(grammarAccess.getCheckAccess().getCompareComparisonParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__IntegerAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getIntegerINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getCheckAccess().getIntegerINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraCheck__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtraCheckAccess().getOperatorOperatorsParserRuleCall_0_0()); }
		ruleOperators
		{ after(grammarAccess.getExtraCheckAccess().getOperatorOperatorsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtraCheck__CheckAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtraCheckAccess().getCheckCheckParserRuleCall_1_0()); }
		ruleCheck
		{ after(grammarAccess.getExtraCheckAccess().getCheckCheckParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
